/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package tke.mobility.support;

import java.awt.Color;
import java.util.List;
import java.util.ArrayList;
import javax.swing.JComboBox;
import java.util.Date;
import java.awt.event.*;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.sql.Array;
import java.util.Collection;
import java.util.Iterator;
import java.util.ListIterator;
import javax.swing.JTable;
import javax.swing.table.TableColumn;
import javax.xml.ws.Holder;
import org.jdom2.input.SAXBuilder;
import org.jdom2.Element;
import org.jdom2.Document;
import org.jdom2.JDOMException;
import org.jdom2.filter.ElementFilter;
import tke.mobility.support.*;
import javax.swing.table.TableModel;

/**
 *
 * @author Rich
 */
public class TKEMobilitySuport extends javax.swing.JFrame {

    String queryToExecute = null;
    Util ut = new Util();
    Vector data;
    Vector columnName;
    int rowCount;
    String WhichDatabase = null;
    String TimeFrame = null;
    String EmployeeId = null;
    StringBuilder sb = null;
    String dateParam = null;
    boolean isError = false;
    private JComboBox cboGetEmployees;
    int rows;
    int cols;
    DefaultTableModel model;
    String DEVICEID;
    String APPID;
    String d1 = null;
    String d2 = null;


    /**
     * Creates new form MainForm
     */
    public TKEMobilitySuport() throws ClassNotFoundException, SQLException {
        initComponents();
        PopulateReportNames(cboReportName);
        PopulateDateRange(cboDateRange);
        cmdExecute1.setVisible(false);       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cboReportName = new javax.swing.JComboBox();
        cmdExecute = new javax.swing.JButton();
        cboDateRange = new javax.swing.JComboBox();
        lblConnectivity = new javax.swing.JLabel();
        lblMessage = new javax.swing.JLabel();
        pnlEnterDateRange = new javax.swing.JPanel();
        txtEndDate = new javax.swing.JTextField();
        txtStartDate = new javax.swing.JTextField();
        lblDateStart = new javax.swing.JLabel();
        lblDateEnd = new javax.swing.JLabel();
        txtEmployeeId = new javax.swing.JTextField();
        pnlTicketNumber = new javax.swing.JPanel();
        txtTaskTicketNumber = new javax.swing.JTextField();
        label3 = new java.awt.Label();
        label7 = new java.awt.Label();
        label2 = new java.awt.Label();
        label9 = new java.awt.Label();
        textArea3 = new java.awt.TextArea();
        textArea4 = new java.awt.TextArea();
        lblRowCount = new javax.swing.JLabel();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        cmdExecute1 = new javax.swing.JButton();
        lblQueryTime = new javax.swing.JLabel();
        lblTime = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TKE Mobility Support v1.2");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocationByPlatform(true);
        setPreferredSize(new java.awt.Dimension(1000, 835));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cboReportName.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboReportNameItemStateChanged(evt);
            }
        });
        cboReportName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboReportNameActionPerformed(evt);
            }
        });
        getContentPane().add(cboReportName, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 33, 235, -1));

        cmdExecute.setText("Run");
        cmdExecute.setToolTipText("Run report");
        cmdExecute.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                cmdExecuteMousePressed(evt);
            }
        });
        cmdExecute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExecuteActionPerformed(evt);
            }
        });
        getContentPane().add(cmdExecute, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 170, -1, -1));

        cboDateRange.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboDateRangeItemStateChanged(evt);
            }
        });
        cboDateRange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboDateRangeActionPerformed(evt);
            }
        });
        getContentPane().add(cboDateRange, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 30, 265, -1));

        lblConnectivity.setForeground(new java.awt.Color(51, 255, 0));
        getContentPane().add(lblConnectivity, new org.netbeans.lib.awtextra.AbsoluteConstraints(37, 932, -1, -1));

        lblMessage.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblMessage.setForeground(new java.awt.Color(255, 0, 0));
        getContentPane().add(lblMessage, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 498, 20));

        pnlEnterDateRange.setToolTipText("Enter Start/End Date (dd-MMM-yy)");

        txtEndDate.setToolTipText("Enter end date \"dd-mon-yy\"");

        txtStartDate.setToolTipText("Enter start date \"dd-mon-yy\"");
        txtStartDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStartDateActionPerformed(evt);
            }
        });

        lblDateStart.setText("Start Date");

        lblDateEnd.setText("End Date");

        javax.swing.GroupLayout pnlEnterDateRangeLayout = new javax.swing.GroupLayout(pnlEnterDateRange);
        pnlEnterDateRange.setLayout(pnlEnterDateRangeLayout);
        pnlEnterDateRangeLayout.setHorizontalGroup(
            pnlEnterDateRangeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEnterDateRangeLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlEnterDateRangeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblDateEnd)
                    .addComponent(lblDateStart))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlEnterDateRangeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtStartDate, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                    .addComponent(txtEndDate))
                .addContainerGap())
        );
        pnlEnterDateRangeLayout.setVerticalGroup(
            pnlEnterDateRangeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEnterDateRangeLayout.createSequentialGroup()
                .addGroup(pnlEnterDateRangeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDateStart))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEnterDateRangeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDateEnd)
                    .addComponent(txtEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(pnlEnterDateRange, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 30, -1, -1));

        txtEmployeeId.setText("Enter Oracle Id");
        txtEmployeeId.setToolTipText("");
        txtEmployeeId.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                txtEmployeeIdMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                txtEmployeeIdMouseEntered(evt);
            }
        });
        txtEmployeeId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmployeeIdActionPerformed(evt);
            }
        });
        getContentPane().add(txtEmployeeId, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 220, -1));

        txtTaskTicketNumber.setText("Enter Ticket or Task Number");
        txtTaskTicketNumber.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtTaskTicketNumberMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                txtTaskTicketNumberMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                txtTaskTicketNumberMouseEntered(evt);
            }
        });
        txtTaskTicketNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTaskTicketNumberActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlTicketNumberLayout = new javax.swing.GroupLayout(pnlTicketNumber);
        pnlTicketNumber.setLayout(pnlTicketNumberLayout);
        pnlTicketNumberLayout.setHorizontalGroup(
            pnlTicketNumberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTicketNumberLayout.createSequentialGroup()
                .addComponent(txtTaskTicketNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        pnlTicketNumberLayout.setVerticalGroup(
            pnlTicketNumberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTicketNumberLayout.createSequentialGroup()
                .addComponent(txtTaskTicketNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        getContentPane().add(pnlTicketNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(253, 66, -1, -1));

        label3.setText("label3");
        getContentPane().add(label3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 0, 0));

        label7.setText("label7");
        getContentPane().add(label7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 0, 0));

        label2.setText("label2");
        getContentPane().add(label2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 0, 0));

        label9.setText("label8");
        getContentPane().add(label9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 0, 0));
        getContentPane().add(textArea3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 0, 0));
        getContentPane().add(textArea4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 0, 0));

        lblRowCount.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblRowCount.setForeground(new java.awt.Color(51, 51, 255));
        getContentPane().add(lblRowCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 533, 20));

        jTabbedPane3.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane3StateChanged(evt);
            }
        });

        jButton1.setText("Run");

        jButton2.setText("jButton2");

        jLabel1.setText("jLabel1");

        jLabel2.setText("jLabel2");
        jLabel2.setToolTipText("");

        jTextField1.setText("jTextField1");

        jTextField2.setText("jTextField2");
        jTextField2.setToolTipText("");

        jTextField3.setText("jTextField3");
        jTextField3.setToolTipText("");

        jTextField4.setText("jTextField4");
        jTextField4.setToolTipText("");

        jTextField5.setText("jTextField5");
        jTextField5.setToolTipText("");

        jTextField6.setText("jTextField6");
        jTextField6.setToolTipText("");

        lblStatus.setText("lblStatus");

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                        .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                                .addGap(375, 375, 375)
                                .addComponent(jButton1))
                            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(26, 26, 26)
                                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                                .addGap(284, 284, 284)
                                .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3)))
                .addContainerGap())
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                    .addContainerGap(389, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(421, Short.MAX_VALUE)))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(221, 221, 221)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                    .addContainerGap(298, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(281, Short.MAX_VALUE)))
        );
        jLayeredPane1.setLayer(jButton1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jButton2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jTextField1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jTextField2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jTextField3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jTextField4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jTextField5, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jTextField6, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(lblStatus, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jScrollPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jTabbedPane3.addTab("Health Check", jLayeredPane1);

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane1.setViewportView(jTextArea2);

        jTabbedPane3.addTab("Time Summary", jScrollPane1);

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane2.setViewportView(jTable1);

        jTabbedPane3.addTab("Report Data", jScrollPane2);

        getContentPane().add(jTabbedPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 206, -1, 390));

        cmdExecute1.setText("Refresh");
        cmdExecute1.setToolTipText("Run report");
        cmdExecute1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                cmdExecute1MousePressed(evt);
            }
        });
        cmdExecute1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExecute1ActionPerformed(evt);
            }
        });
        getContentPane().add(cmdExecute1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 170, -1, -1));

        lblQueryTime.setToolTipText("");
        getContentPane().add(lblQueryTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 600, 430, 20));
        lblQueryTime.getAccessibleContext().setAccessibleName("lblQueryTime");

        lblTime.setToolTipText("");
        getContentPane().add(lblTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 620, 430, 20));

        getAccessibleContext().setAccessibleDescription("");
        getAccessibleContext().setAccessibleParent(this);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cboReportNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboReportNameActionPerformed


    }//GEN-LAST:event_cboReportNameActionPerformed

    private boolean TimeSummaryWSCall(String empID) {
        String task = "";
        String taskName = "";
        String taskWorkDate = "";
        String taskStartDate = "";
        String taskEndDate = "";
        String entryType = "";
        Double totalLabor = 0.0;
        Double totalTravel = 0.0;
        Double totalExpense = 0.0;
        String lineID = "";
        Object[] rowData = null;
        StringBuilder builder = new StringBuilder();
   
        DEVICEID = "";
        APPID = "";
        
        final Holder<List<TimeSummaryEntry>> timeSummaryEntry = new Holder<List<TimeSummaryEntry>>();
        final Holder<List<WeekTimeDetail>> weekTimeDetail = new Holder<List<WeekTimeDetail>>();
        final Holder<List<DayTimeDetail>> dayTimeDetail = new Holder<List<DayTimeDetail>>();
        final Holder<List<TicketTimeDetail>> ticketTimeDetail = new Holder<List<TicketTimeDetail>>();
        final Holder<Integer> result = new Holder<Integer>();
        ClientEp service = new ClientEp();      
        service.getTkeTpCusXd11TimSumPt().selectTimeSummary(empID, DEVICEID, APPID, timeSummaryEntry, weekTimeDetail, dayTimeDetail, ticketTimeDetail, result);
//        ArrayList dataElements = null;
//        Vector row = new Vector();
//       
//        Object columns [] = {"TaskID","TaskName","TaskWorkDate","StartDate","EndDate","EntryType","TotalLabor","TotalTravel","TotalExpense","LineID"};
//        for(Object column : columns)  
//        {
//            jTable2.addColumn((TableColumn)column);
//        }
//DefaultTableModel model0 = new DefaultTableModel(data,cols);
        
        for (TimeSummaryEntry obj : timeSummaryEntry.value) {
            try {
                if (!obj.getTaskID().toString().equals("")) {
                    task = obj.getTaskID().toString();                   
                }
                if (!obj.getTaskName().toString().equals("")) {
                    taskName = obj.getTaskName().toString();
                }
                if (obj.getWorkDate() != null) {
                    taskWorkDate = obj.getWorkDate().toString();
                }
                if (obj.getStartDate() != null) {
                    taskStartDate = obj.getStartDate().toString();
                }
                if (obj.getEndDate() != null) {
                    taskEndDate = obj.getEndDate().toString();
                }
                if (!obj.getEntryType().toString().equals("")) {
                    entryType = obj.getEntryType().toString();
                }
                if (obj.getTotalLaborHours() != 0.0) {
                    totalLabor = obj.getTotalLaborHours();
                }
                if (obj.getTotalTravelHours() != 0.0) {
                    totalTravel = obj.getTotalTravelHours();
                }
                if (obj.getExpenseTotal() != 0.0) {
                    totalExpense = obj.getExpenseTotal();
                }
                if (!obj.getLineID().toString().equals("")) {
                    lineID = obj.getLineID().toString();
                }

            } catch (NullPointerException n) {
                System.out.println("ERROR reading element:" + obj);
                Logger.getLogger(TKEMobilitySuport.class.getName()).log(Level.SEVERE, null, n);
            }
   
            //jTable2 = new JTable(new DefaultTableModel(new Object[]{"TaskID","TaskName","TaskWorkDate","StartDate","EndDate","EntryType","TotalLabor","TotalTravel","TotalExpense","LineID"}));          
            //((ArrayList)dataElements). task,taskName,taskWorkDate,taskStartDate,taskEndDate,entryType,totalLabor,totalTravel,totalExpense};
            builder.append(String.format("TaskID: %s TaskName: %s TaskWorkDate: %s StartDate: %s EndDate: %s EntryType: %s TotalLabor: %f TotalTravel: %f TotalExpense: %f LineID: %s", task, taskName, taskWorkDate, taskStartDate, taskEndDate, entryType, totalLabor, totalTravel, totalExpense, lineID) + "\n");
            //System.out.println(String.format("TaskID: %s TaskName: %s TaskWorkDate: %s StartDate: %s EndDate: %s EntryType: %s TotalLabor: %f TotalTravel: %f TotalExpense: %f LineID: %s", task, taskName, taskWorkDate, taskStartDate, taskEndDate, entryType, totalLabor, totalTravel, totalExpense, lineID));          
        }
            jTextArea2.setText(builder.toString());
        return true;
    }

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        Date dt = new Date();
        lblTime.setText(dt.toString());
        pnlEnterDateRange.setVisible(false);

    }//GEN-LAST:event_formWindowActivated
    Boolean Validate() {
        Util ut = new Util();
        String msg = "";
        Boolean val = true;
        if (cboReportName.getSelectedIndex() == 0) {
            val = false;
            msg = msg + "Please select a report!\n";
            cmdExecute.setText("Run");
            cmdExecute.setForeground(Color.black);
        }

        if (cboDateRange.getSelectedIndex() == 0) {
            if (cboDateRange.isVisible()) {
                val = false;
                msg = msg + "Please select a timeframe, or enter valid dates!";
                cmdExecute.setText("Run");
                cmdExecute.setForeground(Color.black);
            }
        }
        if (pnlEnterDateRange.isVisible()) {
            if (txtStartDate.getText().isEmpty()) {
                val = false;
                msg = msg + "Please select a valid start date!";
                cmdExecute.setText("Run");
                cmdExecute.setForeground(Color.black);
            }
            if (txtEndDate.getText().isEmpty()) {
                val = false;
                msg = msg + "Please select a valid end date!";
                cmdExecute.setText("Run");
                cmdExecute.setForeground(Color.black);
            }
        }

        if (!txtStartDate.getText().isEmpty() && !txtEndDate.getText().isEmpty()) {
            if (txtStartDate.getText().toString().matches("^[0-9]{1,2}-[a-zA-Z]{3}-[0-9]{2}$")) {
                val = true;

            } else {
                val = false;
                msg = msg + "Please select a valid start date format (dd-Mon-yy)!";
            }
            if (txtEndDate.getText().toString().matches("^[0-9]{1,2}-[a-zA-Z]{3}-[0-9]{2}$")) {
                val = true;
            } else {
                val = false;
                msg = msg + "Please select a valid end date format (dd-Mon-yy)!";
            }
        }
        if (!val) {
            lblRowCount.setForeground(Color.red);
            lblRowCount.setText(msg);
        } else {
            lblRowCount.setForeground(Color.BLUE);
        }

        return val;
    }

    public ArrayList GetDeviceID(String empID) throws SQLException {
        ResultSet results = null;
        ArrayList<String> arr = new ArrayList<String>();
        String dml = String.format("select DEVICEID,APPID from headerline where pdapersonid = %s and lastupdatedate = (select max(lastupdatedate) from headerline where pdapersonid = %s)", empID, empID);
        if (!dml.isEmpty()) {
            MyDBConnection connection = new MyDBConnection();
            try {
                results = connection.connect(dml, "ANTINTG");
            } catch (Exception ex) {
                Logger.getLogger(TKEMobilitySuport.class.getName()).log(Level.SEVERE, null, ex);
            }

            while (results.next()) {
                int i = 1;
                while (i <= results.getMetaData().getColumnCount()) {
                    arr.add(results.getString(i++));
                }
            }
        }
        return arr;
    }

    @SuppressWarnings({"BroadCatchBlock", "TooBroadCatch"})
    private void cmdExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExecuteActionPerformed

            Date bmin = new Date();
            long elapsedTime = 0;
        if (cboReportName.getSelectedItem().equals("Time Summary")) {
            try {
                TimeSummaryWSCall(txtEmployeeId.getText());
                cmdExecute.setForeground(Color.BLACK);
                cmdExecute.setText("Run");
               
            } catch (Exception exp) {
                ut.ShowErrorMessage(exp.getMessage());
                cmdExecute.setForeground(Color.BLACK);
                cmdExecute.setText("Run");
            }
        } 
        
          if (cboReportName.getSelectedItem().equals("Health Check")) {
            try {
                PopulateHealthCheckValues();
                PopulateHealthCheckValuesStats();
                cmdExecute.setForeground(Color.BLACK);
                cmdExecute.setText("Run");
               
            } catch (Exception exp) {
                ut.ShowErrorMessage(exp.getMessage());
                cmdExecute.setForeground(Color.BLACK);
                cmdExecute.setText("Run");
            }
        } 
        
            String query = null;
          
            Util.SaveDates c = new Util.SaveDates();
            d1 = c.GetDate1(txtStartDate.getText());
            d2 = c.GetDate2(txtEndDate.getText());
            if (cboDateRange.getSelectedItem().equals("Today")) {

                TimeFrame = " And trunc(creation_date)  Between trunc(sysdate) and trunc(sysdate)";
                if (pnlEnterDateRange.isVisible()) {
                    TimeFrame = String.format(" And trunc(creation_date)  Between '%s' and '%s'", d1, d2);
                }
                //SVG
                if (cboReportName.getSelectedItem().equals("Tickets sent to Mobile from SVG")) {
                    TimeFrame = " and trunc(imp.updateddt) between trunc(sysdate) and trunc(sysdate)";
                    if (pnlEnterDateRange.isVisible()) {
                        TimeFrame = String.format(" And trunc(imp.updateddt)  Between '%s' and '%s'", d1, d2);
                    }
                }
                //SVG
                if (cboReportName.getSelectedItem().equals("Tickets accepted by Mobile")) {
                    TimeFrame = " AND to_char(TimeWindowStart) between trunc(sysdate) and trunc(sysdate)";
                    if (pnlEnterDateRange.isVisible()) {
                        TimeFrame = String.format(" And to_char(TimeWindowStart)  Between '%s' and '%s'", d1, d2);
                    }
                }
                //ANT
                if (cboReportName.getSelectedItem().equals("AMP Device Connectivity")) {
                    TimeFrame = " and trunc(ch.eventtime) between trunc(sysdate) and trunc(sysdate)";
                    if (pnlEnterDateRange.isVisible()) {
                        TimeFrame = String.format(" And trunc(ch.eventtime)  Between '%s' and '%s'", d1, d2);
                    }
                }
                //ANTINTG
                if (cboReportName.getSelectedItem().equals("Ticket Status (BC)")) {
                    TimeFrame = " and trunc(creationdate) between trunc(sysdate) and trunc(sysdate)";
                    if (pnlEnterDateRange.isVisible()) {
                        TimeFrame = String.format(" And trunc(creationdate)  Between '%s' and '%s'", d1, d2);
                    }
                }
                //ANTINTG BC
                if (cboReportName.getSelectedItem().equals("Ticket Debriefs (BC)")) {
                    TimeFrame = " and trunc(DBS.CREATEDON) between trunc(sysdate) and trunc(sysdate)";
                    if (pnlEnterDateRange.isVisible()) {
                        TimeFrame = String.format(" And trunc(DBS.CREATEDON)  Between '%s' and '%s'", d1, d2);
                    }
                }
            } //WEEK
            else if (cboDateRange.getSelectedItem().equals("7 days ago")) {

                TimeFrame = " and trunc(creation_date) Between trunc(sysdate)-7 and trunc(sysdate)";
                if (pnlEnterDateRange.isVisible()) {
                    TimeFrame = String.format(" And trunc(creation_date)  Between '%s' and '%s'", d1, d2);
                }
                //ANT
                if (cboReportName.getSelectedItem().equals("Tickets sent to Mobile from SVG")) {
                    TimeFrame = " and trunc(imp.updateddt) between trunc(sysdate)-7 and trunc(sysdate)";
                    if (pnlEnterDateRange.isVisible()) {
                        TimeFrame = String.format(" And trunc(imp.updateddt)  Between '%s' and '%s'", d1, d2);
                    }
                }
                //ANT
                if (cboReportName.getSelectedItem().equals("AMP Device Connectivity")) {
                    TimeFrame = " and trunc(ch.eventtime) between trunc(sysdate)-7 and trunc(sysdate)";
                    if (pnlEnterDateRange.isVisible()) {
                        TimeFrame = String.format(" And trunc(ch.eventtime)  Between '%s' and '%s'", d1, d2);
                    }
                }
                //ANTINTG
                if (cboReportName.getSelectedItem().equals("Ticket Status (BC)")) {
                    TimeFrame = " and trunc(creationdate) between trunc(sysdate)-7 and trunc(sysdate)";
                    if (pnlEnterDateRange.isVisible()) {
                        TimeFrame = String.format(" And trunc(creationdate)  Between '%s' and '%s'", d1, d2);
                    }
                }
                //ANTINTG BC
                if (cboReportName.getSelectedItem().equals("Ticket Debriefs (BC)")) {
                    TimeFrame = " and trunc(DBS.CREATEDON) between trunc(sysdate)-7 and trunc(sysdate)";
                    if (pnlEnterDateRange.isVisible()) {
                        TimeFrame = String.format(" And trunc(DBS.CREATEDON)  Between '%s' and '%s'", d1, d2);
                    }
                }
                //SVG
                if (cboReportName.getSelectedItem().equals("Tickets accepted by Mobile")) {
                    TimeFrame = " AND to_char(TimeWindowStart) between trunc(sysdate)-7 and trunc(sysdate)";
                    if (pnlEnterDateRange.isVisible()) {
                        TimeFrame = String.format(" And to_char(TimeWindowStart)  Between '%s' and '%s'", d1, d2);
                    }
                }
            } //2 WEEKS
            else if (cboDateRange.getSelectedItem().equals("2 weeks ago")) {
                TimeFrame = " and trunc(creation_date) Between trunc(sysdate)-14 and trunc(sysdate)";
                if (pnlEnterDateRange.isVisible()) {
                    TimeFrame = String.format(" And trunc(creation_date)  Between '%s' and '%s'", d1, d2);
                }
                //SVG
                if (cboReportName.getSelectedItem().equals("Tickets sent to Mobile from SVG")) {
                    TimeFrame = " and trunc(imp.updateddt) between trunc(sysdate)-14 and trunc(sysdate)";
                    if (pnlEnterDateRange.isVisible()) {
                        TimeFrame = String.format(" And trunc(imp.updateddt)  Between '%s' and '%s'", d1, d2);
                    }
                }
                //SVG
                if (cboReportName.getSelectedItem().equals("Tickets accepted by Mobile")) {
                    TimeFrame = " AND to_char(TimeWindowStart) between trunc(sysdate)-14 and trunc(sysdate)";
                    if (pnlEnterDateRange.isVisible()) {
                        TimeFrame = String.format(" And to_char(TimeWindowStart)  Between '%s' and '%s'", d1, d2);
                    }
                    //ANT
                    if (cboReportName.getSelectedItem().equals("AMP Device Connectivity")) {
                        TimeFrame = " and trunc(ch.eventtime) between trunc(sysdate)-14 and trunc(sysdate)";
                        if (pnlEnterDateRange.isVisible()) {
                            TimeFrame = String.format(" And trunc(ch.eventtime)  Between '%s' and '%s'", d1, d2);
                        }
                    }
                    //ANTINTG
                    if (cboReportName.getSelectedItem().equals("Ticket Status (BC)")) {
                        TimeFrame = " and trunc(creationdate) between trunc(sysdate)-14 and trunc(sysdate)";
                        if (pnlEnterDateRange.isVisible()) {
                            TimeFrame = String.format(" And trunc(creationdate)  Between '%s' and '%s'", d1, d2);
                        }
                    }
                    //ANTINTG BC
                    if (cboReportName.getSelectedItem().equals("Ticket Debriefs (BC)")) {
                        TimeFrame = " and trunc(DBS.CREATEDON) between trunc(sysdate)-14 and trunc(sysdate)";
                        if (pnlEnterDateRange.isVisible()) {
                            TimeFrame = String.format(" And trunc(DBS.CREATEDON)  Between '%s' and '%s'", d1, d2);
                        }
                    }
                }
            }//1 MONTH
                else if (cboDateRange.getSelectedItem().equals("1 month ago")) {
                    TimeFrame = " and trunc(creation_date) Between trunc(sysdate)-30 and trunc(sysdate) ";

                    if (pnlEnterDateRange.isVisible()) {
                        TimeFrame = String.format(" And trunc(creation_date)  Between '%s' and '%s'", d1, d2);
                    }
                    //SVG
                    if (cboReportName.getSelectedItem().equals("Tickets sent to Mobile from SVG")) {
                        TimeFrame = " and trunc(imp.updateddt) Between trunc(sysdate)-30 and trunc(sysdate)  ";
                        if (pnlEnterDateRange.isVisible()) {
                            TimeFrame = String.format(" And trunc(imp.updateddt)  Between '%s' and '%s'", d1, d2);
                        }
                    }
                    //SVG
                    if (cboReportName.getSelectedItem().equals("Tickets accepted by Mobile")) {
                        TimeFrame = " AND to_char(TimeWindowStart) between trunc(sysdate)-30 and trunc(sysdate)";
                        if (pnlEnterDateRange.isVisible()) {
                            TimeFrame = String.format(" And to_char(TimeWindowStart)  Between '%s' and '%s'", d1, d2);
                        }
                        //ANT
                        if (cboReportName.getSelectedItem().equals("AMP Device Connectivity")) {
                            TimeFrame = " and trunc(ch.eventtime) between trunc(sysdate)-30 and trunc(sysdate)";
                            if (pnlEnterDateRange.isVisible()) {
                                TimeFrame = String.format(" And trunc(ch.eventtime)  Between '%s' and '%s'", d1, d2);
                            }
                        }
                        //ANTINTG
                        if (cboReportName.getSelectedItem().equals("Ticket Status (BC)")) {
                            TimeFrame = " and trunc(creationdate) between trunc(sysdate)-30 and trunc(sysdate)";
                            if (pnlEnterDateRange.isVisible()) {
                                TimeFrame = String.format(" And trunc(creationdate)  Between '%s' and '%s'", d1, d2);
                            }
                        }
                        //ANTINTG BC
                        if (cboReportName.getSelectedItem().equals("Ticket Debriefs (BC)")) {
                            TimeFrame = " and trunc(DBS.CREATEDON) between trunc(sysdate)-30 and trunc(sysdate)";
                            if (pnlEnterDateRange.isVisible()) {
                                TimeFrame = String.format(" And trunc(DBS.CREATEDON)  Between '%s' and '%s'", d1, d2);
                            
                            }
                        }
                    }
                }
                    
                    
                 //1 MONTH
                    else if (cboDateRange.getSelectedItem().equals("1 month ago")) {
                        TimeFrame = " and trunc(creation_date) Between trunc(sysdate)-30 and trunc(sysdate) ";

                        if (pnlEnterDateRange.isVisible()) {
                            TimeFrame = String.format(" And trunc(creation_date)  Between '%s' and '%s'", d1, d2);
                        }
                        //SVG
                        if (cboReportName.getSelectedItem().equals("Tickets sent to Mobile from SVG")) {
                            TimeFrame = " and trunc(imp.updateddt) Between trunc(sysdate)-30 and trunc(sysdate)  ";
                            if (pnlEnterDateRange.isVisible()) {
                                TimeFrame = String.format(" And trunc(imp.updateddt)  Between '%s' and '%s'", d1, d2);
                            }
                        }
                        //SVG
                        if (cboReportName.getSelectedItem().equals("Tickets accepted by Mobile")) {
                            TimeFrame = " AND to_char(TimeWindowStart) between trunc(sysdate)-30 and trunc(sysdate)";
                            if (pnlEnterDateRange.isVisible()) {
                                TimeFrame = String.format(" And to_char(TimeWindowStart)  Between '%s' and '%s'", d1, d2);
                            }
                            //ANT
                            if (cboReportName.getSelectedItem().equals("AMP Device Connectivity")) {
                                TimeFrame = " and trunc(ch.eventtime) between trunc(sysdate)-30 and trunc(sysdate)";
                                if (pnlEnterDateRange.isVisible()) {
                                    TimeFrame = String.format(" And trunc(ch.eventtime)  Between '%s' and '%s'", d1, d2);
                                }
                            }
                            //ANTINTG
                            if (cboReportName.getSelectedItem().equals("Ticket Status (BC)")) {
                                TimeFrame = " and trunc(creationdate) between trunc(sysdate)-30 and trunc(sysdate)";
                                if (pnlEnterDateRange.isVisible()) {
                                    TimeFrame = String.format(" And trunc(creationdate)  Between '%s' and '%s'", d1, d2);
                                }
                            }
                            //ANTINTG BC
                            if (cboReportName.getSelectedItem().equals("Ticket Debriefs (BC)")) {
                                TimeFrame = " and trunc(DBS.CREATEDON) between trunc(sysdate)-30 and trunc(sysdate)";
                                if (pnlEnterDateRange.isVisible()) {
                                    TimeFrame = String.format(" And trunc(DBS.CREATEDON)  Between '%s' and '%s'", d1, d2);
                                }
                            }
                        }
                    }//Enter Dates
                        else if (cboDateRange.getSelectedItem().equals("Let me enter dates")) {
                            if (pnlEnterDateRange.isVisible()) {
                                TimeFrame = String.format(" And trunc(creation_date)  Between '%s' and '%s'", d1, d2);
                            }
                            //SVG
                            if (cboReportName.getSelectedItem().equals("Tickets sent to Mobile from SVG")) {
                                if (pnlEnterDateRange.isVisible()) {
                                    TimeFrame = String.format(" And trunc(imp.updateddt)  Between '%s' and '%s'", d1, d2);
                                }
                            }
                            //SVG
                            if (cboReportName.getSelectedItem().equals("Tickets accepted by Mobile")) {
                                if (pnlEnterDateRange.isVisible()) {
                                    TimeFrame = String.format(" And to_char(TimeWindowStart)  Between '%s' and '%s'", d1, d2);
                                }
                              }
                                //ANT
                                if (cboReportName.getSelectedItem().equals("AMP Device Connectivity")) {
                                    if (pnlEnterDateRange.isVisible()) {
                                        TimeFrame = String.format(" And trunc(ch.eventtime)  Between '%s' and '%s'", d1, d2);
                                    }
                                }
                                //ANTINTG
                                if (cboReportName.getSelectedItem().equals("Ticket Status (BC)")) {
                                    if (pnlEnterDateRange.isVisible()) {
                                        TimeFrame = String.format(" And trunc(creationdate)  Between '%s' and '%s'", d1, d2);
                                    }
                                }
                                //ANTINTG BC
                                if (cboReportName.getSelectedItem().equals("Ticket Debriefs (BC)")) {
                                    if (pnlEnterDateRange.isVisible()) {
                                        TimeFrame = String.format(" And trunc(DBS.CREATEDON)  Between '%s' and '%s'", d1, d2);
                                    }
                                }
                        }
                            
                            if (cboReportName.getSelectedItem().equals("Debriefs sent from Mobile")) {
                                WhichDatabase = "OOD";
                                try {
                                    //EmployeeId = ParseEmployee(cboGetEmployees);
                                } catch (Exception x) {
                                }
                                query = StringConstants.MechanicDebriefs;
                                sb = new StringBuilder(query);
                                if (TimeFrame != null) {
                                    sb.append(TimeFrame);
                                }
                                if (EmployeeId != null) {
                                    sb.append(" and employee_id = nvl(" + EmployeeId + ",employee_id)");
                                } else {
                                    sb.append(" and employee_id = nvl(" + txtEmployeeId.getText() + ",employee_id)");
                                }
                                if (!txtTaskTicketNumber.getText().equalsIgnoreCase("Enter Ticket or Task Number")) {
                                    if (txtTaskTicketNumber.getText().length() != 0) {
                                        sb.append(" AND task_id = nvl(" + txtTaskTicketNumber.getText() + ",task_id)");
                                    }
                                }
                                sb.append(" order by creation_date desc");
                                query = sb.toString();

                            } 
                            else if (cboReportName.getSelectedItem().equals("Repair/Construction ToolBox Talks tickets posted")) {

                                WhichDatabase = "OOD";
                                try {
                                    //EmployeeId = ParseEmployee(cboGetEmployees);
                                } catch (Exception x) {
                                }
                                query = StringConstants.RepairToolBoxTicketsPosted;
                                sb = new StringBuilder(query);
                                if (TimeFrame != null) {
                                    sb.append(TimeFrame);
                                }
                                if (EmployeeId != null) {
                                    sb.append(" and mec.person_id = nvl(" + EmployeeId + ",mec.person_id)");

                                } else {
                                    sb.append(" and mec.person_id = nvl(" + txtEmployeeId.getText() + ",mec.person_id)");
                                }
                                if (!txtTaskTicketNumber.getText().equalsIgnoreCase("Enter Ticket or Task Number")) {
                                    if (txtTaskTicketNumber.getText().length() != 0) {
                                        sb.append(" AND mec.TASK_NUMBER = nvl(" + txtTaskTicketNumber.getText() + ",mec.TASK_NUMBER)");
                                    }
                                }
                                sb.append(" ORDER BY mec.TRANSACTION_ID DESC");
                                query = sb.toString();
                            
                
                            }else if (cboReportName.getSelectedItem().equals("Tickets sent to Mobile from SVG")) {
                                dateParam = "SVGDate";
                                try {
                                    //EmployeeId = ParseEmployee(cboGetEmployees);
                                } catch (Exception x) {
                                }
                                query = StringConstants.TicketsSentToDeviceFromSVG;
                                WhichDatabase = "SVG";
                                sb = new StringBuilder(query);
                                if (TimeFrame != null) {
                                    sb.append(TimeFrame);
                                }
                                if (EmployeeId != null) {
                                    sb.append(" and employeehostid = nvl(" + EmployeeId + ",employeehostid)");

                                } else {
                                    sb.append(" and employeehostid = nvl(" + txtEmployeeId.getText() + ",employeehostid)");
                                }
                                sb.append(" Order by imp.UPDATEDDT desc ");
                                query = sb.toString();
                            } else if (cboReportName.getSelectedItem().equals("Tickets accepted by Mobile")) {
                                dateParam = "SVGDate";
                                try {
                                    //EmployeeId = ParseEmployee(cboGetEmployees);
                                } catch (Exception x) {
                                }
                                query = StringConstants.TicketsAcceptedByDevice;
                                WhichDatabase = "SVG";
                                sb = new StringBuilder(query);
                                if (TimeFrame != null) {
                                    sb.append(TimeFrame);
                                }
                                if (EmployeeId != null) {
                                    sb.append(" and personID = nvl(" + EmployeeId + ",personID)");

                                } else {
                                    sb.append(" and personID = nvl(" + txtEmployeeId.getText() + ",personID)");
                                }
                                   if (!txtTaskTicketNumber.getText().equalsIgnoreCase("Enter Ticket or Task Number")) {
                                    if (txtTaskTicketNumber.getText().length() != 0) {
                                        sb.append(" AND TICKETID = nvl('" + txtTaskTicketNumber.getText() + "',TICKETID)");
                                    }
                                }
                                sb.append(" GROUP BY  TimeWindowStart\n"
                                        + ",TicketId\n"
                                        + ",\"Site Name\"\n"
                                        + ",Employee\n"
                                        + ",Units\n"
                                        + ",PersonId\n"
                                        + ",TicketStatus\n"
                                        + ",TicketType\n"
                                        + ",TW\n"
                                        + "ORDER BY TimeWindowStart DESC");
                                query = sb.toString();

                            } else if (cboReportName.getSelectedItem().equals("Repair/Construction Tickets Posted")) {
                                try {
                                    //EmployeeId = ParseEmployee(cboGetEmployees);
                                } catch (Exception x) {
                                }
                                WhichDatabase = "OOD";
                                query = StringConstants.TicketsPostedForRepCon;
                                sb = new StringBuilder(query);
                                if (TimeFrame != null) {
                                    sb.append(TimeFrame);
                                }
                                if (EmployeeId != null) {
                                    sb.append(" and req.mechanic_emp_reference= nvl(" + EmployeeId + ",req.mechanic_emp_reference)");

                                } else {
                                    sb.append(" and  req.mechanic_emp_reference = nvl(" + txtEmployeeId.getText() + ",req.mechanic_emp_reference)");
                                }
                                if (!txtTaskTicketNumber.getText().equalsIgnoreCase("Enter Ticket or Task Number")) {
                                    if (txtTaskTicketNumber.getText().length() != 0) {
                                        sb.append(" AND req.TASK_NUMBER = nvl(" + txtTaskTicketNumber.getText() + ",req.TASK_NUMBER)");
                                    }
                                }
                                sb.append(" ORDER BY req.TRANSACTION_ID DESC");
                                query = sb.toString();

                            } //Duplicate SIT's
                            else if (cboReportName.getSelectedItem().equals("Check Duplicate SIT (MS2.0)")) {
                                WhichDatabase = "ANTINTG";
                                query = StringConstants.PollingStopped;
                                sb = new StringBuilder(query);
                                try {
                                    sb.append(" where person_id = nvl(" + txtEmployeeId.getText() + ",person_id)");
                                    sb.append(" and device_end_date IS NULL");
                                    query = sb.toString();
                                } catch (Exception x) {

                                }
                            } //ANT
                            else if (cboReportName.getSelectedItem().equals("AMP Device Connectivity")) {
                                try {
                                    //EmployeeId = ParseEmployee(cboGetEmployees);
                                } catch (Exception x) {
                                }
                                WhichDatabase = "ANT";
                                query = StringConstants.AntennaDeviceConnectivity;
                                sb = new StringBuilder(query);
                                if (TimeFrame != null) {
                                    sb.append(TimeFrame);
                                }
                                if (EmployeeId != null) {
                                    sb.append(String.format(" and s.subscriberid = nvl( '%s', s.subscriberid )", EmployeeId));
                                } else {
                                    sb.append(String.format(" and s.subscriberid = nvl( '%s', s.subscriberid )", txtEmployeeId.getText()));
                                }
                                sb.append(" order by ch.EventTime desc)");
                                query = sb.toString();

                            } //Business Continuity
                            else if (cboReportName.getSelectedItem().equals("Ticket Status (BC)")) {
                                try {
                                    //EmployeeId = ParseEmployee(cboGetEmployees);
                                } catch (Exception x) {
                                }
                                WhichDatabase = "ANTINTG";
                                query = StringConstants.TicketHistory;
                                sb = new StringBuilder(query);
                                if (TimeFrame != null) {
                                    sb.append(TimeFrame);
                                }
                                // TODO Add Ticket Number
                                if (EmployeeId != null) {
                                    sb.append(String.format(" and pdapersonid = nvl( '%s', pdapersonid )", EmployeeId));
                                } else if (EmployeeId == null) {
                                    sb.append(String.format(" and pdapersonid= nvl( '%s', pdapersonid )", txtEmployeeId.getText()));
                                }
                                if (pnlTicketNumber.isVisible() && txtTaskTicketNumber.getText().length() != 0 && !txtTaskTicketNumber.getText().equalsIgnoreCase("Enter Ticket or Task Number")) {
                                    sb.append(String.format(" and ticketid = NVL( '%s', ticketid) ", txtTaskTicketNumber.getText()));
                                }

                                sb.append(" order by creationdate desc");
                                query = sb.toString();
                            } //BC Debriefs
                            else if (cboReportName.getSelectedItem().equals("Ticket Debriefs (BC)")) {
                                try {
                                    //EmployeeId = ParseEmployee(cboGetEmployees);
                                } catch (Exception x) {
                                }
                                WhichDatabase = "ANTINTG";
                                query = StringConstants.BCDebriefs;
                                sb = new StringBuilder(query);
                                if (TimeFrame != null) {
                                    sb.append(TimeFrame);
                                }
                                // TODO Add Ticket Number
                                if (EmployeeId != null) {
                                    sb.append(String.format(" and dbs.mechanicid = nvl( '%s', dbs.mechanicid )", EmployeeId));
                                } else if (EmployeeId == null) {
                                    sb.append(String.format(" and dbs.mechanicid= nvl( '%s', dbs.mechanicid )", txtEmployeeId.getText()));
                                }
                                if (pnlTicketNumber.isVisible() && txtTaskTicketNumber.getText().length() != 0 && !txtTaskTicketNumber.getText().equalsIgnoreCase("Enter Ticket or Task Number")) {
                                    sb.append(String.format(" and (dbs.ticketid = NVL( '%s', dbs.ticketid) ", txtTaskTicketNumber.getText()));
                                    sb.append(String.format(" or dbs.taskid = NVL( '%s', dbs.taskid)) ", txtTaskTicketNumber.getText()));
                                }
                                sb.append(" order by dbs.createdon desc");
                                query = sb.toString();
                            }
                            ResultSet rs = null;
                            EmployeeId = null;
                            Date dt = new Date();
                            if (Validate()) {
                                try {
                                   
                                    if (query != null) {
                                        if (!query.isEmpty()) {
                                            MyDBConnection connection = new MyDBConnection();
                                            try {
                                                rs = connection.connect(query, WhichDatabase);
                                            } catch (Exception ex) {
                                                Logger.getLogger(TKEMobilitySuport.class.getName()).log(Level.SEVERE, null, ex);
                                            }
                                            //Display data
                                            model = ut.BuildTableModel(rs);
                                            jTable1.setModel(model);
                                            //Loop through rows
                                            rows = model.getRowCount();
                                            cols = model.getColumnCount();
                                            for (int x = 0; x < cols; x++) {
                                                for (int y = 0; y < rows; y++) {

                                                }
                                            }

                                            if (model.getRowCount() == 0) {
                                                lblRowCount.setForeground(Color.red);
                                                lblRowCount.setText("Query returned no records!");
                                                cmdExecute.setForeground(Color.BLACK);
                                                cmdExecute.setText("Run");
                                            } else {

                                                lblRowCount.setText(String.format("%d record(s) found.", model.getRowCount()));
                                                cmdExecute.setForeground(Color.BLACK);
                                                cmdExecute.setText("Run");
                                            }
                                        }
                                    }
                                    Date emin = new Date();
                                    dt = new Date();
                                    elapsedTime = emin.getTime() - bmin.getTime(); 
                                    elapsedTime = (elapsedTime / 1000);                                   
                                    lblTime.setText(String.format("Query last run: %s", dt.toString()));
                                    lblQueryTime.setText(String.format("Query execution time: %s", SetTimeElapsed(elapsedTime)));
                                    System.out.println(query);
                                    jTable1.setVisible(true);                              

                                } catch (SQLException ex) {
                                    cmdExecute.setText("Run");
                                    System.out.println(query);
                                    lblMessage.setText(ex.getMessage());
                                    java.util.logging.Logger.getLogger(TKEMobilitySuport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                                } catch (Exception ex) {
                                    cmdExecute.setForeground(Color.BLACK);
                                    cmdExecute.setText("Run");
                                    System.out.println(query);
                                    lblMessage.setText(ex.getMessage());
                                    java.util.logging.Logger.getLogger(TKEMobilitySuport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                                }
                            }
                        
                    
                
            
    }//GEN-LAST:event_cmdExecuteActionPerformed

    public String ParseEmployee(JComboBox cbo) {
        String val = "";
        int start = cbo.getSelectedItem().toString().indexOf("(");
        int end = cbo.getSelectedItem().toString().indexOf(":");
        val = cbo.getSelectedItem().toString().substring(start + 1, end);
        return val;
    }

    public String ParseElement(String val) {
        int start = val.toString().indexOf(";");
        int end = val.length();
        val = val.toString().substring(start + 1, end);
        return val;
    }

    public ArrayList ParseXMLDocElementArray(String[] elementValue) {
        ArrayList a = new ArrayList();
        int index = 0;
        try {
            SAXBuilder builder = new SAXBuilder();
            String hurl = StringConstants.ProdHealthCheckURL;
            Document document = (Document) builder.build(hurl);
            for (String e : elementValue) {
                ElementFilter elementFilter = new ElementFilter(e);
                for (Element table : document.getDescendants(elementFilter)) {
                    if (e.equals("Status")) {
                        if (!table.getValue().equalsIgnoreCase("RUNNING")) {
                            isError = true;
                        }
                    }
                    //System.out.println(index + " " + e + " : " + table.getValue());
                    a.add(table.getValue());
                    index++;
                }
            }
        } catch (IOException io) {
            System.out.println(io.getMessage());
        } catch (JDOMException jdomex) {
            System.out.println(jdomex.getMessage());
        }
        return a;
    }

    public ArrayList ParseXMLDocElementArrayStats(String[] elementValue) {
        ArrayList a = new ArrayList();
        int index = 0;
        try {
            SAXBuilder builder = new SAXBuilder();
            String hurl = StringConstants.ProdHealthCheckURL;
            Document document = (Document) builder.build(hurl);
            for (String e : elementValue) {
                ElementFilter elementFilter = new ElementFilter(e);
                for (Element table : document.getDescendants(elementFilter)) {
                    if (e.equals("LoadFactor")) {

                    }
                    if (e.equals("CurrentQueueLength")) {
                        if (Integer.parseInt(table.getValue()) > StringConstants.HealthCheckCurrentQueueLength) {
                            isError = true;

                        }
                    }
                    if (e.equals("RunningUOWNum")) {
                        if (Integer.parseInt(table.getValue()) >= StringConstants.HealthCheckRunningUOWNum) {
                            isError = true;

                        }
                    }
                    if (e.equals("AverageExecutionTime")) {

                    }
                    if (e.equals("AverageWaitTime")) {

                    }
                    if (e.equals("WaitingUOWNum")) {

                    }
                    if (e.equals("SuspendedUOWNum")) {

                    }
                    if (e.equals("TotalUOWNum")) {

                    }
                    if (e.equals("LongUOWNum")) {

                    }
                    if (e.equals("Overbooked")) {
                        if (!table.getValue().equals(StringConstants.HealthCheckOverBooked)) {
                            isError = true;

                        }
                    }
                    if (e.equals("Busy")) {
                        if (!table.getValue().equals(StringConstants.HealthCheckBusy)) {
                            isError = true;

                        }
                    }

                    //System.out.println(index + " " + e + " : " + table.getValue());
                    a.add(e + ":" + table.getValue());
                    index++;
                }

            }
        } catch (IOException io) {
            System.out.println(io.getMessage());
        } catch (JDOMException jdomex) {
            System.out.println(jdomex.getMessage());
        }
        return a;
    }

    public String SetTimeElapsed(long elapsedTime) {
        String retVal = null;
        if (elapsedTime > 0) {
            try {
                if (elapsedTime < 59) {
                    retVal = elapsedTime + " secs.";
                }
                if (elapsedTime > 60) {
                    retVal = elapsedTime / 60 + " min(s). " + elapsedTime % 60 + " secs.";
                }
            } catch (Exception e) {
            }
        }
        return retVal;
    }


    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing


    }//GEN-LAST:event_formWindowClosing
    public void actionPerformed(ActionEvent e) {

    }


    private void cboDateRangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboDateRangeActionPerformed
        //  "Today;7 days ago;2 weeks ago;All"    
        Util.SaveDates c = new Util.SaveDates();
        d1 = c.GetDate1(txtStartDate.getText());
        d2 = c.GetDate2(txtEndDate.getText());
    }//GEN-LAST:event_cboDateRangeActionPerformed

    private void cmdExecuteMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdExecuteMousePressed
        cmdExecute.setForeground(Color.red);
        cmdExecute.setText("Working....");

    }//GEN-LAST:event_cmdExecuteMousePressed

    private void txtTaskTicketNumberMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtTaskTicketNumberMouseClicked

    }//GEN-LAST:event_txtTaskTicketNumberMouseClicked

    private void cboDateRangeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboDateRangeItemStateChanged
        // TODO add your handling code here:
        evt.getStateChange();
        evt.getItem();
        if (cboDateRange.getSelectedItem().equals("Let me enter dates")) {
            pnlEnterDateRange.setVisible(true);
        }
        if (!cboDateRange.getSelectedItem().equals("Let me enter dates")) {
            pnlEnterDateRange.setVisible(false);
        }


    }//GEN-LAST:event_cboDateRangeItemStateChanged

    private void cboReportNameItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboReportNameItemStateChanged

        if (cboReportName.getSelectedItem().equals("Antenna Health Check")) {
            cboDateRange.setEnabled(false);
            jTable1.setVisible(false);
        }

        if (!cboReportName.getSelectedItem().equals("Choose Report")) {

            if (cboReportName.getSelectedItem().equals("Ticket Status (BC)")
                    || cboReportName.getSelectedItem().equals("Ticket Debriefs (BC)")) {
                pnlTicketNumber.setVisible(true);
                cboDateRange.setVisible(true);
                txtEmployeeId.setVisible(true);
                
            }
            else if (cboReportName.getSelectedItem().toString().equalsIgnoreCase("Repair/Construction Tickets Posted")) {
                pnlTicketNumber.setVisible(true);
            } 
            else if (cboReportName.getSelectedItem().toString().equalsIgnoreCase("Check Duplicate SIT (MS2.0)")) {
                pnlTicketNumber.setVisible(false);
                cboDateRange.setVisible(false);
                pnlEnterDateRange.setVisible(false);
            } 
            else if (cboReportName.getSelectedItem().toString().equalsIgnoreCase("Time Summary")) {
                pnlTicketNumber.setVisible(false);
                cboDateRange.setVisible(false);
                pnlEnterDateRange.setVisible(false);
                txtEmployeeId.setVisible(true);
                jTabbedPane3.setSelectedIndex(1);
            } 
            else if (cboReportName.getSelectedItem().toString().equalsIgnoreCase("Health Check")) {
                pnlTicketNumber.setVisible(false);
                cboDateRange.setVisible(false);
                pnlEnterDateRange.setVisible(false);
                txtEmployeeId.setVisible(false);
                //jTabbedPane3.setSelectedIndex(2);
            } 
            else{
                pnlTicketNumber.setVisible(true);
                cboDateRange.setVisible(true);
                jTabbedPane3.setSelectedIndex(2);
                txtEmployeeId.setVisible(true);
            }
        }
    }//GEN-LAST:event_cboReportNameItemStateChanged

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        try {
            //PopulateEmployees(cboGetEmployees);
            //cboGetEmployees.removeItem("Loading Employees......");
        } catch (Exception ex) {
            Logger.getLogger(TKEMobilitySuport.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_formWindowOpened

    private void txtTaskTicketNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTaskTicketNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTaskTicketNumberActionPerformed

    private void txtEmployeeIdMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtEmployeeIdMouseEntered
        if (txtEmployeeId.getText().equals("Enter Oracle Id")) {
            txtEmployeeId.setText("");
        }

    }//GEN-LAST:event_txtEmployeeIdMouseEntered

    private void txtEmployeeIdMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtEmployeeIdMouseExited
        if (txtEmployeeId.getText().equals("")) {
            txtEmployeeId.setText("Enter Oracle Id");
        }
    }//GEN-LAST:event_txtEmployeeIdMouseExited

    private void txtTaskTicketNumberMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtTaskTicketNumberMouseEntered
        if (txtTaskTicketNumber.getText().equals("Enter Ticket or Task Number")) {
            txtTaskTicketNumber.setText("");
        }
    }//GEN-LAST:event_txtTaskTicketNumberMouseEntered

    private void txtTaskTicketNumberMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtTaskTicketNumberMouseExited
        if (txtTaskTicketNumber.getText().equals("")) {
            txtTaskTicketNumber.setText("Enter Ticket or Task Number");
        }
    }//GEN-LAST:event_txtTaskTicketNumberMouseExited

    private void cmdExecute1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdExecute1MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdExecute1MousePressed

    private void cmdExecute1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExecute1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdExecute1ActionPerformed

    private void txtStartDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStartDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtStartDateActionPerformed

    private void jTabbedPane3StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane3StateChanged
        // TODO add your handling code here:
        //        if (jTabbedPane3.getSelectedIndex() == -1) {
            //            PopulateHealthCheckValues();
            //            PopulateHealthCheckValuesStats();
            //            cmdExecute.setVisible(false);
            //            cmdExecute1.setVisible(true);
            //       }
    }//GEN-LAST:event_jTabbedPane3StateChanged

    private void txtEmployeeIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmployeeIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmployeeIdActionPerformed
    void PopulateHealthCheckValues() {
        String[] elements = new String[4];
        elements[0] = "StartTime";
        elements[1] = "Clients";
        elements[2] = "Status";
        elements[3] = "Name";

        ArrayList ar = ParseXMLDocElementArray(elements);

        //Servers
        jLabel1.setText(ar.get(6).toString());
        jLabel2.setText(ar.get(7).toString());
        //Status
        jTextField1.setText(ar.get(4).toString());
        jTextField2.setText(ar.get(5).toString());
        //Clients
        jTextField3.setText(ar.get(2).toString());
        jTextField4.setText(ar.get(3).toString());
        //StartTime
        jTextField5.setText(ar.get(0).toString());
        jTextField6.setText(ar.get(1).toString());

        jButton1.setForeground(Color.BLACK);
        

        if (isError) {
            lblStatus.setText("PROBLEM");
            lblStatus.setForeground(Color.RED);
            jButton1.setText("Run");
        } else {
            jButton1.setText("Refresh");
            lblStatus.setText("OK");
            lblStatus.setForeground(Color.GREEN);
        }
        Date dt = new Date();
        lblTime.setText(String.format("Last updated: %s", dt.toString()));
  
    }

    void PopulateHealthCheckValuesStats() {
        String[] elements = new String[11];
        elements[0] = "LoadFactor";
        elements[1] = "CurrentQueueLength";
        elements[2] = "RunningUOWNum";
        elements[3] = "AverageExecutionTime";
        elements[4] = "AverageWaitTime";
        elements[5] = "WaitingUOWNum";
        elements[6] = "SuspendedUOWNum";
        elements[7] = "TotalUOWNum";
        elements[8] = "LongUOWNum";
        elements[9] = "Overbooked";
        elements[10] = "Busy";

        ArrayList arStats = ParseXMLDocElementArrayStats(elements);
        jTextArea1.setText(arStats.toString());

    }

    private void cmdRefresh88ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add yRefresour handling code here:
        // Refresh88();
    }

    public void PopulateReportNames(javax.swing.JComboBox box) {
        String strReports = StringConstants.reportNames;
        String[] arReports = strReports.split(";");
        for (String s : arReports) {
            box.addItem(s);
        }
    }

    public void PopulateDateRange(javax.swing.JComboBox box) {
        String strReports = StringConstants.PopulateDateCriteria;
        String[] arReports = strReports.split(";");
        box.addItem("Select Date Range");
        for (String s : arReports) {
            box.addItem(s);
        }
    }

    public void PopulateEmployees(javax.swing.JComboBox box) throws ClassNotFoundException, SQLException, Exception {
        MyDBConnection db = new MyDBConnection();
        String qry = StringConstants.PopulateEmployees;
        ResultSet rs = db.connect(qry, "SVG");
        while (rs.next()) {
            box.addItem(rs.getString("Employee"));
        }
    }

    /**
     *
     * @param args the command line arguments
     * @throws java.lang.ClassNotFoundException
     * @throws java.sql.SQLException
     */
    public static void main(String args[]) throws ClassNotFoundException, SQLException, Exception {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }

        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TKEMobilitySuport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TKEMobilitySuport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TKEMobilitySuport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TKEMobilitySuport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new TKEMobilitySuport().setVisible(true);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(TKEMobilitySuport.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(TKEMobilitySuport.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JComboBox cboDateRange;
    private javax.swing.JComboBox cboReportName;
    public javax.swing.JButton cmdExecute;
    public javax.swing.JButton cmdExecute1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private java.awt.Label label7;
    private java.awt.Label label9;
    public javax.swing.JLabel lblConnectivity;
    private javax.swing.JLabel lblDateEnd;
    private javax.swing.JLabel lblDateStart;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JLabel lblQueryTime;
    public javax.swing.JLabel lblRowCount;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTime;
    public javax.swing.JPanel pnlEnterDateRange;
    private javax.swing.JPanel pnlTicketNumber;
    private java.awt.TextArea textArea3;
    private java.awt.TextArea textArea4;
    private javax.swing.JTextField txtEmployeeId;
    private javax.swing.JTextField txtEndDate;
    private javax.swing.JTextField txtStartDate;
    public javax.swing.JTextField txtTaskTicketNumber;
    // End of variables declaration//GEN-END:variables

}
